# requirements.txt
Django==4.2.7
Pillow==10.1.0
django-crispy-forms==2.1
crispy-bootstrap5==0.7
python-decouple==3.8
django-ckeditor==6.7.1
mssql-django==1.5.2
pyodbc==5.1.0

# Dockerfile
FROM python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1

# Base OS deps + build tools for pyodbc + ODBC headers
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl gnupg ca-certificates apt-transport-https \
    build-essential g++ make python3-dev pkg-config \
    unixodbc unixodbc-dev \
    && rm -rf /var/lib/apt/lists/*

# Microsoft ODBC Driver 18 (Debian 12 / bookworm) via keyrings
RUN set -eux; \
    mkdir -p /etc/apt/keyrings; \
    curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /etc/apt/keyrings/microsoft.gpg; \
    chmod 0644 /etc/apt/keyrings/microsoft.gpg; \
    echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/debian/12/prod bookworm main" > /etc/apt/sources.list.d/mssql-release.list; \
    apt-get update; \
    ACCEPT_EULA=Y apt-get install -y --no-install-recommends msodbcsql18; \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install Python deps first for better layer caching
COPY requirements.txt .
RUN pip install --prefer-binary -r requirements.txt

# Entrypoint script
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# App source
COPY . .

# Ensure static/media dirs exist
RUN mkdir -p /app/staticfiles /app/media

EXPOSE 8000

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# docker-compose.yml
version: '3.8'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD:-YourStrong!Passw0rd}
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql

  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      # DB config
      - DB_ENGINE=mssql
      - DB_HOST=sqlserver
      - DB_PORT=1433
      - DB_NAME=carshop
      - DB_USER=sa
      - DB_PASSWORD=${SA_PASSWORD:-YourStrong!Passw0rd}
    volumes:
      - .:/app
    depends_on:
      - sqlserver
    entrypoint: ["/usr/local/bin/entrypoint.sh"]

volumes:
  mssql_data:

# carshop/settings.py
import os

# ** rest of code here **/

if os.environ.get('DB_ENGINE') == 'mssql':
    DATABASES = {
        'default': {
            'ENGINE': 'mssql',
            'NAME': os.environ.get('DB_NAME', 'carshop'),
            'USER': os.environ.get('DB_USER', 'sa'),
            'PASSWORD': os.environ.get('DB_PASSWORD', 'YourStrong!Passw0rd'),
            'HOST': os.environ.get('DB_HOST', 'sqlserver'),
            'PORT': os.environ.get('DB_PORT', '1433'),
            'OPTIONS': {
                'driver': 'ODBC Driver 18 for SQL Server',
                'trustServerCertificate': 'yes',
            },
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# ** rest of code here **/

# entrypoint.sh
#!/bin/sh
set -e
set -x

echo "Starting entrypoint..."

mkdir -p /app/media /app/staticfiles

# If using MSSQL, wait until the DB is ready to accept connections
if [ "$DB_ENGINE" = "mssql" ]; then
    echo "Waiting for SQL Server at ${DB_HOST:-sqlserver}:${DB_PORT:-1433} ..."
    python - << 'PYCODE'
import os, time, sys
import pyodbc

host = os.environ.get('DB_HOST', 'sqlserver')
port = os.environ.get('DB_PORT', '1433')
server = f"{host},{port}"
user = os.environ.get('DB_USER', 'sa')
password = os.environ.get('DB_PASSWORD', 'YourStrong!Passw0rd')

conn_str = (
    "DRIVER={ODBC Driver 18 for SQL Server};"
    f"SERVER={server};UID={user};PWD={password};"
    "TrustServerCertificate=Yes;"
)

for i in range(60):
    try:
        with pyodbc.connect(conn_str, timeout=5) as conn:
            print("SQL Server is reachable.")
            break
    except Exception as e:
        print(f"Waiting for SQL Server... ({i+1}/60): {e}")
        time.sleep(2)
else:
    print("SQL Server not reachable after waiting.", file=sys.stderr)
    sys.exit(1)
PYCODE
fi

echo "Running migrations..."
python manage.py migrate --noinput

echo "Collecting static..."
python manage.py collectstatic --noinput || true

echo "Starting server..."
exec python manage.py runserver 0.0.0.0:8000
